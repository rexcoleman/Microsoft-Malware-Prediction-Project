import unittest
import pandas as pd
import numpy as np
from src.data.clean_data import handle_missing_values, remove_duplicates, check_no_missing_values, check_no_duplicates, check_value_ranges

class TestCleanData(unittest.TestCase):
    def setUp(self):
        # Sample dataframe for testing
        self.df = pd.DataFrame({
            'A': [1, 2, np.nan, 4, 5],
            'B': ['a', 'b', 'b', np.nan, 'a'],
            'C': [1, 1, 1, 1, 1],
            'D': [10, 20, 30, 40, 50]
        })
        self.df['B'] = self.df['B'].astype('category')
        self.df['id'] = [1, 2, 2, 4, 5]

    def test_handle_missing_values(self):
        cleaned_df = handle_missing_values(self.df)
        self.assertFalse(cleaned_df.isnull().values.any(), "Data contains missing values after cleaning")

    def test_remove_duplicates(self):
        deduped_df = remove_duplicates(self.df, 'id')
        self.assertEqual(len(deduped_df), 4, "Data contains duplicates after removal")

    def test_check_no_missing_values(self):
        cleaned_df = handle_missing_values(self.df)
        self.assertTrue(check_no_missing_values(cleaned_df), "Data contains missing values")

    def test_check_no_duplicates(self):
        deduped_df = remove_duplicates(self.df, 'id')
        self.assertTrue(check_no_duplicates(deduped_df, 'id'), "Data contains duplicates")

    def test_check_value_ranges(self):
        ranges = {'A': (1, 5), 'D': (10, 50)}
        self.assertTrue(check_value_ranges(self.df, ranges), "Values are out of the specified ranges")

if __name__ == '__main__':
    unittest.main()
