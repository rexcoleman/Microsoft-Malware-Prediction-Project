import unittest
import pandas as pd
import yaml
from src.data.clean_data import handle_missing_values, remove_duplicates, check_no_missing_values, check_no_duplicates, check_value_ranges
from src.data.load_data import load_data

class TestCleanData(unittest.TestCase):
    def setUp(self):
        # Load configuration
        with open('config.yaml', 'r') as file:
            self.config = yaml.safe_load(file)
        
        self.dtypes = self.config['dtypes']
        self.raw_data_path = self.config['paths']['raw_data']
        
        # Load the dataframe
        self.df = load_data(self.raw_data_path, self.dtypes, use_dask=False)
        
    def test_handle_missing_values(self):
        cleaned_df = handle_missing_values(self.df)
        self.assertFalse(cleaned_df.isnull().values.any(), "Data contains missing values after cleaning")

    def test_remove_duplicates(self):
        deduped_df = remove_duplicates(self.df, 'MachineIdentifier')
        self.assertEqual(len(deduped_df), len(self.df.drop_duplicates(subset=['MachineIdentifier'])), "Data contains duplicates after removal")

    def test_check_no_missing_values(self):
        cleaned_df = handle_missing_values(self.df)
        self.assertTrue(check_no_missing_values(cleaned_df), "Data contains missing values")

    def test_check_no_duplicates(self):
        deduped_df = remove_duplicates(self.df, 'MachineIdentifier')
        self.assertTrue(check_no_duplicates(deduped_df, 'MachineIdentifier'), "Data contains duplicates")

    def test_check_value_ranges(self):
        # Define some example ranges for columns
        ranges = {'Census_ProcessorCoreCount': (1, 64), 'Census_TotalPhysicalRAM': (128, 262144)}
        self.assertTrue(check_value_ranges(self.df, ranges), "Values are out of the specified ranges")

    def test_column_presence(self):
        expected_columns = set(self.dtypes.keys())
        actual_columns = set(self.df.columns)
        self.assertTrue(expected_columns.issubset(actual_columns), "Some expected columns are missing from the dataframe")

if __name__ == '__main__':
    unittest.main()
