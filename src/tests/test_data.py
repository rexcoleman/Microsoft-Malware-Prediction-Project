import pandas as pd
from src.data.clean_data import handle_missing_values, remove_duplicates

def check_column_names(df, expected_columns):
    loaded_columns = set(df.columns)
    missing_columns = expected_columns - loaded_columns
    unexpected_columns = loaded_columns - expected_columns

    if missing_columns:
        raise ValueError(f"Missing columns: {missing_columns}")
    if unexpected_columns:
        raise ValueError(f"Unexpected columns: {unexpected_columns}")

    return True

def check_data_types(df, expected_dtypes):
    mismatched_types = {col: (df[col].dtype, expected_dtypes[col]) for col in df.columns if df[col].dtype != expected_dtypes[col]}
    
    if mismatched_types:
        raise ValueError("Mismatched data types: " + ", ".join([f"{col}: expected {expected}, got {actual}" for col, (actual, expected) in mismatched_types.items()]))
    
    return True

def check_has_detections_values(df):
    if not df['HasDetections'].isin([0, 1]).all():
        raise ValueError("HasDetections column contains unexpected values.")
    return True

def check_no_missing_values(df):
    if df.isnull().sum().sum() == 0:
        return True
    else:
        raise ValueError("There are missing values in the dataframe.")

def check_no_duplicates(df, id_column='MachineIdentifier'):
    if df[id_column].duplicated().sum() == 0:
        return True
    else:
        raise ValueError(f"There are duplicate rows based on the {id_column} column.")

def check_value_ranges(df, column_ranges):
    for column, (min_val, max_val) in column_ranges.items():
        if not df[column].between(min_val, max_val).all():
            raise ValueError(f"Values in column {column} are out of the expected range ({min_val}, {max_val}).")
    return True

def test_handle_missing_values():
    df = pd.DataFrame({'A': [1, None, 3]})
    df = handle_missing_values(df)
    assert df.isnull().sum().sum() == 0, "There should be no missing values"

def test_remove_duplicates():
    df = pd.DataFrame({'id': [1, 1, 2], 'value': [10, 10, 20]})
    df = remove_duplicates(df, 'id')
    assert len(df) == 2, "There should be 2 unique rows after removing duplicates"

if __name__ == "__main__":
    test_handle_missing_values()
    test_remove_duplicates()
    print("All tests passed!")
