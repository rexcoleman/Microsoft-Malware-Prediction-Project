import pandas as pd

def check_column_names(df, expected_columns):
    """
    Check if the DataFrame contains the expected columns.
    
    Parameters:
    - df: DataFrame, the DataFrame to check.
    - expected_columns: set, the set of expected column names.
    
    Returns:
    - bool: True if the DataFrame contains all expected columns, False otherwise.
    """
    missing_columns = expected_columns - set(df.columns)
    extra_columns = set(df.columns) - expected_columns
    if missing_columns:
        print(f"Missing columns: {missing_columns}")
    if extra_columns:
        print(f"Extra columns: {extra_columns}")
    return set(df.columns) == expected_columns

def check_data_types(df, dtypes):
    """
    Check if the DataFrame columns have the expected data types.
    
    Parameters:
    - df: DataFrame, the DataFrame to check.
    - dtypes: dict, dictionary with expected data types.
    
    Returns:
    - bool: True if all columns have the expected data types, False otherwise.
    """
    for column, dtype in dtypes.items():
        actual_dtype = pd.api.types.infer_dtype(df[column], skipna=True)
        expected_dtype = pd.api.types.infer_dtype(pd.Series([0], dtype=dtype), skipna=True)
        if actual_dtype != expected_dtype:
            print(f"Column {column} expected type {expected_dtype}, but got {actual_dtype}")
            return False
    return True

def check_has_detections_values(df):
    """
    Check if the 'HasDetections' column contains only 0 and 1 values.
    
    Parameters:
    - df: DataFrame, the DataFrame to check.
    
    Returns:
    - bool: True if the 'HasDetections' column contains only 0 and 1, False otherwise.
    """
    return set(df['HasDetections'].unique()).issubset({0, 1})
