import unittest
import pandas as pd
from src.features.build_features import create_interaction_features, scale_features

class TestFeatures(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # Load a sample dataset for testing
        cls.df = pd.DataFrame({
            'feature1': [0.1, 0.2, 0.3, 0.4],
            'feature2': [1, 2, 3, 4],
            'feature3': [5, 6, 7, 8]
        })
        cls.original_columns = cls.df.columns.tolist()
        cls.interaction_columns = ['interaction_feature1', 'interaction_feature2']  # Replace with actual names

    def test_create_interaction_features(self):
        df_with_interactions = create_interaction_features(self.df.copy())
        new_columns = set(df_with_interactions.columns) - set(self.original_columns)
        self.assertEqual(new_columns, set(self.interaction_columns), "Interaction features were not created correctly.")

    def test_scale_features(self):
        features_to_scale = ['feature1', 'feature2']  # Replace with actual feature names
        df_scaled = scale_features(self.df.copy(), features_to_scale)
        for feature in features_to_scale:
            self.assertTrue(df_scaled[feature].between(0, 1).all(), f"Feature {feature} is not scaled correctly.")

if __name__ == '__main__':
    unittest.main()
