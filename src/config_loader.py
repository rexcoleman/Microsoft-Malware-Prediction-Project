import yaml
import os
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def read_yaml_config(config_path):
    """
    Read configuration from a YAML file.
    
    Parameters:
    - config_path: str, path to the YAML configuration file.
    
    Returns:
    - dict: configuration parameters.
    """
    if not os.path.exists(config_path):
        logging.error(f"Configuration file not found: {config_path}")
        raise FileNotFoundError(f"Configuration file not found: {config_path}")
    
    with open(config_path, 'r') as file:
        try:
            config = yaml.safe_load(file)
            logging.info(f"Successfully loaded configuration from {config_path}")
            return config
        except yaml.YAMLError as exc:
            logging.error(f"Error parsing YAML file: {config_path}, error: {exc}")
            raise exc

# Define paths to configuration files
config_dir = os.path.join(os.path.dirname(__file__), '..', 'config')
paths_config_file = os.path.join(config_dir, 'paths.yaml')
dtypes_config_file = os.path.join(config_dir, 'dtypes.yaml')
preprocessing_config_file = os.path.join(config_dir, 'preprocessing.yaml')
models_config_file = os.path.join(config_dir, 'models.yaml')
feature_metadata_config_file = os.path.join(config_dir, 'feature_metadata.yaml')

# Load configurations
try:
    paths_config = read_yaml_config(paths_config_file)
    dtypes_config = read_yaml_config(dtypes_config_file)
    preprocessing_config = read_yaml_config(preprocessing_config_file)
    models_config = read_yaml_config(models_config_file)
    feature_metadata_config = read_yaml_config(feature_metadata_config_file)
except Exception as e:
    logging.critical("Failed to load one or more configuration files.")
    raise e

# Ensure required keys are present
required_keys_paths = ['paths']
required_keys_dtypes = ['dtypes']
required_keys_preprocessing = ['preprocessing']
required_keys_models = ['models']
required_keys_feature_metadata = ['features']

def check_required_keys(config, required_keys, config_name):
    missing_keys = [key for key in required_keys if key not in config]
    if missing_keys:
        logging.error(f"Missing required keys in {config_name}: {missing_keys}")
        raise KeyError(f"Missing required keys in {config_name}: {missing_keys}")

check_required_keys(paths_config, required_keys_paths, 'paths_config')
check_required_keys(dtypes_config, required_keys_dtypes, 'dtypes_config')
check_required_keys(preprocessing_config, required_keys_preprocessing, 'preprocessing_config')
check_required_keys(models_config, required_keys_models, 'models_config')
check_required_keys(feature_metadata_config, required_keys_feature_metadata, 'feature_metadata_config')

# Accessing specific configurations
raw_data_path = paths_config['paths']['raw_data']
processed_data_path = paths_config['paths']['processed_data']

dtypes = dtypes_config['dtypes']

missing_value_strategy = preprocessing_config['preprocessing']['missing_values']
encoding_method = preprocessing_config['preprocessing']['encoding']

rf_params = models_config['models']['random_forest']
lgbm_params = models_config['models']['lightgbm']
