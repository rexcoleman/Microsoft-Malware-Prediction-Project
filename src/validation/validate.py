import pandas as pd
import numpy as np
import yaml
import logging

logging.basicConfig(level=logging.INFO)

def read_yaml_config(config_path):
    """
    Read configuration from a YAML file.
    """
    with open(config_path, 'r') as file:
        return yaml.safe_load(file)

def convert_column_types(df, dtypes_config):
    """
    Convert columns to appropriate data types based on dtypes configuration.
    
    Parameters:
    - df (DataFrame): DataFrame to convert column types.
    - dtypes_config (dict): Dictionary of column data types.
    
    Returns:
    - DataFrame: DataFrame with converted column types.
    """
    for column, dtype in dtypes_config.items():
        try:
            if dtype == 'category':
                df[column] = df[column].astype('category')
            else:
                df[column] = pd.to_numeric(df[column], errors='coerce').astype(dtype)
        except ValueError:
            logging.warning(f"Warning: Could not convert column {column} to {dtype}. Problematic values: {df[column].unique()[:5]}")
    return df

def fill_missing_values(df, dtypes_config):
    """
    Fill missing values in the DataFrame based on data types.
    
    Parameters:
    - df (DataFrame): DataFrame with missing values.
    - dtypes_config (dict): Dictionary of column data types.
    
    Returns:
    - DataFrame: DataFrame with filled missing values.
    """
    for column, dtype in dtypes_config.items():
        if 'int' in dtype or 'float' in dtype:
            df[column] = df[column].fillna(df[column].mean())
        elif 'category' in dtype:
            df[column] = df[column].fillna(df[column].mode()[0])
    return df

def validate_and_clean_data(df, dtypes_config):
    """
    Validate and clean data during ingestion.
    
    Parameters:
    - df (DataFrame): Raw input dataframe.
    - dtypes_config (dict): Dictionary of column data types.
    
    Returns:
    - DataFrame: Cleaned and validated dataframe.
    """
    # Convert columns to appropriate data types
    df = convert_column_types(df, dtypes_config)
    
    # Fill missing values
    df = fill_missing_values(df, dtypes_config)
    
    return df

def main():
    # Load configurations
    dtypes_config = read_yaml_config('../config/dtypes.yaml')['dtypes']
    
    # Example usage
    file_path = '../data/raw/train.csv'
    df_raw = pd.read_csv(file_path)
    df_cleaned = validate_and_clean_data(df_raw, dtypes_config)
    
    # Save or proceed with further processing
    df_cleaned.to_csv('../data/processed/train_cleaned.csv', index=False)
    logging.info("Data validated and cleaned successfully.")

if __name__ == "__main__":
    main()
